#version 330 core

/*
*************************************************************************
* 							 FINAL PROJECT
*************************************************************************
*
* Author: Elisa Miller
* Class : ECE 4122
* Date : 12/05/2023
* 
* Fragment Shader also used in Lab 3
* Added random light intensity for objects in the scene
* 
*/

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
// out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

// Values that stay constant when key is toggled
uniform float diffuseIntensity;
uniform float specularIntensity;
uniform float time;

void main()
{

	// Light emission properties
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 70.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.5,0.5,0.5) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light - Random Intensity Implementation
	float randomIntensity = fract(sin(dot(Position_worldspace, vec3(123.4567, 543.21, 765.432) * time)) * 87654.321);
	float distance = length(LightPosition_worldspace - Position_worldspace);
	float modifiedLightPower = LightPower * (2.0 + randomIntensity);
	float internalLightIntensity = 0.5 + 0.5 * sin(time);

	// Normal of the computed fragment, in camera space
	vec3 n = normalize(Normal_cameraspace);
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize(LightDirection_cameraspace);
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	gl_FragColor.rgb = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		diffuseIntensity * MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance) +
		// Specular : reflective highlight, like a mirror
		specularIntensity * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance * distance) + 
		// Internal Light : random intensity factored by time
		internalLightIntensity * MaterialDiffuseColor;

}